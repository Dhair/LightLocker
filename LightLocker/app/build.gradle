apply from: '../ext.gradle'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: "com.dhair.hotfix"
android {
    compileSdkVersion project.properties.compileSdkVersion
    buildToolsVersion project.properties.buildToolsVersion

    defaultConfig {
        applicationId "com.dhair.lightlocker"
        minSdkVersion project.properties.minSdkVersion
        targetSdkVersion project.properties.targetSdkVersion
        versionCode project.properties.mVersionCode
        versionName project.properties.versionName
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res',
                           'src/main/res/layouts',
                           'src/main/res/layouts/settings',
                           'src/main/res/layouts/main',
                           'src/main/res/layouts/about']
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true
            versionNameSuffix ".dev"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        def timeStamp = new Date().format('MM_dd_HH_mm');
                        def fileName = "LightLocker_${variant.productFlavors[0].name}_v${defaultConfig.versionName}" + "_" + timeStamp + ".apk";
                        output.outputFile = file("${outputFile.parent}/${fileName}")
                    }
                }
            }
        }
    }
    signAppWithKeystore()

    // Channels
    productFlavors {
        xiaomi {}
        qihoo {}
    }

    lintOptions {
        abortOnError false
    }
}

def signAppWithKeystore(){
    def Properties props = new Properties()
    def propFile = new File('key/sign.properties')
    if (propFile.canRead()){
        props.load(new FileInputStream(propFile))

        if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    }else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //Contains:Annotations、SupportV4、SVG(AnimatedVector、SupportVector)
    compile "com.android.support:appcompat-v7:${supportVersion}"
    compile "com.android.support:cardview-v7:${supportVersion}"
    compile "com.android.support:design:${supportVersion}"
    compile "com.android.support:recyclerview-v7:${supportVersion}"

    //ButterKnife
    compile "com.jakewharton:butterknife:${butterknifeVersion}"
    apt "com.jakewharton:butterknife-compiler:${butterknifeVersion}"

    //RxAndroid
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex:rxjava:${rxJavaVersion}"

    //Retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"

    //OkHttp
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"

    //Retrofit-RxJava
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"

    //AutoLayout
    compile project(':autolayout_api')
    apt project(':autolayout_compiler')

    compile project(':AndroidCommon')
    compile project(':AndroidProcess')
}
